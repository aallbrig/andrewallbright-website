AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create subnets, security groups, and network ACLs for a VPC

Parameters:
  VpcId:
    Description: 'VPC ID where the subnet will be created'
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Must be a valid VPC ID.

  WebTierSubnetAAzId:
    Description: 'Availability Zone ID for the public subnet A'
    Type: String
    ConstraintDescription: Must be a valid Availability Zone ID.
  WebTierSubnetBAzId:
    Description: 'Availability Zone ID for the public subnet B'
    Type: String
    ConstraintDescription: Must be a valid Availability Zone ID.
  WebTierACidrBlock:
    Description: 'CIDR block for the public subnet'
    Type: 'String'
    Default: '10.0.2.0/27'
    ConstraintDescription: Must be a valid CIDR block.
  WebTierBCidrBlock:
    Description: 'CIDR block for the public subnet'
    Type: 'String'
    Default: '10.0.2.32/27'
    ConstraintDescription: Must be a valid CIDR block.

  ApplicationTierCidrBlock:
    Description: 'CIDR block for the public subnet'
    Type: 'String'
    Default: '10.0.3.0/27'
    ConstraintDescription: Must be a valid CIDR block.

  DataTierCidrBlock:
    Description: 'CIDR block for the public subnet'
    Type: 'String'
    Default: '10.0.4.0/27'
    ConstraintDescription: Must be a valid CIDR block.

Resources:
  # Network ACLs
  WebTierNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VpcId
  ApplicationTierNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VpcId
  DataTierNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VpcId

  # Subnets
  WebTierSubnetA:
    Type: 'AWS::EC2::Subnet'
    Description: Public subnet for the web tier ()
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref WebTierACidrBlock
      AvailabilityZoneId: !Ref WebTierSubnetAAzId
      MapPublicIpOnLaunch: true
  WebTierSubnetB:
    Type: 'AWS::EC2::Subnet'
    Description: Public subnet for the web tier ()
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref WebTierBCidrBlock
      AvailabilityZoneId: !Ref WebTierSubnetBAzId
      MapPublicIpOnLaunch: true
  ApplicationTierSubnet:
    Type: 'AWS::EC2::Subnet'
    Description: Private subnet for the application tier (wordpress on EC2)
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref ApplicationTierCidrBlock
  DataTierSubnet:
    Type: 'AWS::EC2::Subnet'
    Description: Private subnet for the data tier (mariaDB on RDS)
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref DataTierCidrBlock

  # Security Groups
  AdministrativeAccessSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow web traffic"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  WebTierSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow web traffic"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  ApplicationTierSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow traffic from Web Tier and SSH"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref AdministrativeAccessSecurityGroup
  DataTierSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow MySQL traffic from Application Tier"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ApplicationTierSecurityGroup
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref AdministrativeAccessSecurityGroup

Outputs:
  WebTierSubnetAId:
    Description: 'ID of the created public subnet'
    Value: !Ref WebTierSubnetA
  WebTierSubnetBId:
    Description: 'ID of the created public subnet'
    Value: !Ref WebTierSubnetB
  ApplicationTierSubnetId:
    Description: 'ID of the created public subnet'
    Value: !Ref ApplicationTierSubnet
  DataTierSubnetId:
    Description: 'ID of the created public subnet'
    Value: !Ref DataTierSubnet
  AdministrativeAccessSecurityGroup:
    Description: "Administrative Access Security Group ID"
    Value: !Ref AdministrativeAccessSecurityGroup
  WebTierSecurityGroupId:
    Description: "Web Tier Security Group ID"
    Value: !Ref WebTierSecurityGroup
  ApplicationTierSecurityGroupId:
    Description: "Application Tier Security Group ID"
    Value: !Ref ApplicationTierSecurityGroup
  DataTierSecurityGroupId:
    Description: "Data Tier Security Group ID"
    Value: !Ref DataTierSecurityGroup
