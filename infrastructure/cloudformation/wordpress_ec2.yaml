AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys a WordPress site on EC2

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  ImageId:
    Description: AMI ID for the EC2 instance
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  SubnetId:
    Description: ID of the subnet to deploy the EC2 instance into
    Type: String
  SecurityGroupList:
    Description: A list of security group IDs
    Type: List<String>
  WordpressInstanceProfile:
    Description: Wordpress instance profile
    Type: String
  DatabaseHostParameterName:
    Description: Database host parameter name for wordpress
    Type: String
  DatabaseNameParameterName:
    Description: Database name parameter name for wordpress
    Type: String
  DatabaseUsernameParameterName:
    Description: Database username parameter name for wordpress
    Type: String
  DatabasePasswordSecretArn:
    Description: Mysql or MariaDB database password secret ARN
    Type: String
  WordpressAdminEmailParameterName:
    Description: Wordpress admin email parameter name
    Type: String
  WordpressAdminUsernameParameterName:
    Description: Wordpress admin username parameter name
    Type: String
  WordpressAdminPasswordSecretArn:
    Description: Wordpress admin password secret ARN
    Type: String
  WordpressURLParameterName:
    Description: Wordpress URL parameter name
    Type: String
  WordpressTitleParameterName:
    Description: Wordpress title parameter name
    Type: String
  WordpressDebug:
    Description: Enable debug mode for wordpress
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  WordpressDebugLogs:
    Description: Enable wordpress debug log mode (also requires WordpressDebug)
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

Resources:
  WordPressInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref WordpressInstanceProfile
        SecurityGroupIds: !Ref SecurityGroupList
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash -ex
            dnf update -y
            
            # Install Apache, PHP, and additional necessary modules
            dnf install -y \
              wget \
              php-mysqlnd \
              httpd \
              php \
              php-devel \
              php-fpm \
              php-mysqli \
              php-json \
              mariadb105-server \
              amazon-cloudwatch-agent
            
            set +x
            # Get sensitive pw data from Secrets Manager
            DATABASE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${DatabasePasswordSecretArn} --query SecretString --output text)
            WORDPRESS_ADMIN_PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${WordpressAdminPasswordSecretArn} --query SecretString --output text)
            
            # Get config data from parameter store
            DATABASE_HOST=$(aws ssm get-parameter --name ${DatabaseHostParameterName} --query Parameter.Value --output text)
            DATABASE_NAME=$(aws ssm get-parameter --name ${DatabaseNameParameterName} --query Parameter.Value --output text)
            DATABASE_USERNAME=$(aws ssm get-parameter --name ${DatabaseUsernameParameterName} --query Parameter.Value --output text)
            WORDPRESS_ADMIN_EMAIL=$(aws ssm get-parameter --name ${WordpressAdminEmailParameterName} --query Parameter.Value --output text)
            WORDPRESS_ADMIN_USERNAME=$(aws ssm get-parameter --name ${WordpressAdminUsernameParameterName} --query Parameter.Value --output text)
            WORDPRESS_URL=$(aws ssm get-parameter --name ${WordpressURLParameterName} --query Parameter.Value --output text)
            WORDPRESS_TITLE=$(aws ssm get-parameter --name ${WordpressTitleParameterName} --query Parameter.Value --output text)
            set -x
            
            # Download and install WP-CLI
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
            
            cd /var/www/html
            
            # Configure WordPress
            wp core download --allow-root
            set +x
            wp config create \
              --dbhost="${!DATABASE_HOST}" \
              --dbname="${!DATABASE_NAME}" \
              --dbuser="${!DATABASE_USERNAME}" \
              --dbpass="${!DATABASE_PASSWORD}" \
              --allow-root
            wp core install \
              --url="${!WORDPRESS_URL}" \
              --title="${!WORDPRESS_TITLE}" \
              --admin_user="${!WORDPRESS_ADMIN_USERNAME}" \
              --admin_password="${!WORDPRESS_ADMIN_PASSWORD}" \
              --admin_email="${!WORDPRESS_ADMIN_EMAIL}" \
              --allow-root
            set -x
            
            ## wp_config.php customizations
            # Enable SSL when being sent traffic from CDN and/or loadbalancer
            echo '' >> /var/www/html/wp-config.php
            echo 'if (isset($_SERVER["HTTP_X_FORWARDED_PROTO"]) && $_SERVER["HTTP_X_FORWARDED_PROTO"] == "https")' >> /var/www/html/wp-config.php
            echo '    $_SERVER["HTTPS"] = "on";' >> /var/www/html/wp-config.php
            
            # Enable debug and debug logging
            sed -i '2s/^/define( "WP_DEBUG", ${WordpressDebug} );\n/' /var/www/html/wp-config.php
            sed -i '2s/^/define( "WP_DEBUG", ${WordpressDebug} );\n/' /var/www/html/wp-config.php
            sed -i '3s/^/define( "WP_DEBUG_LOG", ${WordpressDebugLogs} );\n/' /var/www/html/wp-config.php
            # force ssl for admin pages
            sed -i '4s/^/define( "FORCE_SSL_ADMIN", true );\n/' /var/www/html/wp-config.php
            
            # Configure Apache for WordPress
            echo '<Directory "/var/www/html">' > /etc/httpd/conf.d/wordpress.conf
            echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/wordpress.conf
            echo '  AllowOverride All' >> /etc/httpd/conf.d/wordpress.conf
            echo '  Require all granted' >> /etc/httpd/conf.d/wordpress.conf
            echo '</Directory>' >> /etc/httpd/conf.d/wordpress.conf
            
            echo '# Begin Wordpress' > /var/www/html/.htaccess
            echo 'RewriteEngine On' >> /var/www/html/.htaccess
            echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]' >> /var/www/html/.htaccess
            echo 'RewriteBase /' >> /var/www/html/.htaccess
            echo 'RewriteRule ^index\.php$ - [L]' >> /var/www/html/.htaccess
            echo 'RewriteCond %{REQUEST_FILENAME} !-f' >> /var/www/html/.htaccess
            echo 'RewriteCond %{REQUEST_FILENAME} !-d' >> /var/www/html/.htaccess
            echo 'RewriteRule . /index.php [L]' >> /var/www/html/.htaccess
            echo '# END WordPress' >> /var/www/html/.htaccess
            
            # Adjust directory permissions
            usermod -a -G apache ec2-user
            chown -R apache:apache /var/www/html
            chmod 2775 /var/www && find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;
            
            # wp-cli stuff
            sudo -u apache wp theme delete $(sudo -u apache wp theme list --field=name --status=inactive)
            sudo -u apache wp plugin uninstall \
              hello
            sudo -u apache wp theme install \
              twentytwentyone
            sudo -u apache wp plugin install --activate \
              all-in-one-wp-migration \
              contact-form-7 \
              amazon-s3-and-cloudfront \
              display-posts-shortcode \
              flamingo \
              google-site-kit \
              options-for-twenty-twenty-one
            
            # Enable auto updates (wordpress core, theme(s), plugins
            sudo -u apache wp config set WP_AUTO_UPDATE_CORE true --raw
            sudo -u apache wp theme auto-updates enable --all || true
            sudo -u apache wp plugin auto-updates enable --all || true
            
            # Important logs from this ec2 instance I want to stream into cloudwatch
            cat > /tmp/cloudwatch_logs_config.json <<EOL
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "log_group_name": "/ec2/wordpress/var/log/httpd/access_log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/httpd/access_log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/httpd/error_log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/httpd/error_log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/php-fpm/error.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/php-fpm/error.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/www/html/wp-content/debug.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/www/html/wp-content/debug.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/cloud-init-output.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/cloud-init-output.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/dnf.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/dnf.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/amazon/amazon-cloudwatch-agent/configuration-validation.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/amazon/amazon-cloudwatch-agent/configuration-validation.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/amazon/ssm/amazon-ssm-agent.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log"
                      },
                      {
                        "log_group_name": "/ec2/wordpress/var/log/amazon/ssm/errors.log",
                        "log_stream_name": "{instance_id}",
                        "file_path": "/var/log/amazon/ssm/errors.log"
                      }
                    ]
                  }
                }
              }
            }
            EOL
            
            amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/tmp/cloudwatch_logs_config.json -s
            
            # Start Apache
            systemctl start httpd
            systemctl enable httpd

  WordPressEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WordPressInstanceLaunchTemplate
        Version: !GetAtt WordPressInstanceLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetId

Outputs:
  WordPressInstanceId:
    Description: 'ID of the EC2 instance'
    Value: !Ref WordPressEC2Instance
